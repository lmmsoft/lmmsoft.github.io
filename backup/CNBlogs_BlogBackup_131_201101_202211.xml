<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
    <channel>
        <title>博客园-un'estate</title>
        <link>http://www.cnblogs.com/un_estate/</link>
        <description/>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 28 Nov 2022 18:19:10 GMT</lastBuildDate>
        <pubDate>Mon, 28 Nov 2022 18:19:10 GMT</pubDate>
        <ttl>60</ttl>
        <item>
            <title>MSTCBlogReader隐私策略</title>
            <link>http://www.cnblogs.com/un_estate/archive/2012/12/04/2800910.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Tue, 04 Dec 2012 02:37:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2012/12/04/2800910.html</guid>
            <description><![CDATA[<div id="paperTitleArea" align="center"><span id="paperTitle"><span style="color: #000000; font-family: 微软雅黑;">MSTCBlogReader隐私策略</span></span></div>
<div id="blogDetailDiv">
<div class="blog_details_20120222">
<p>隐私策略涵盖您对本应用的使用。</p>
<h3 class="special">隐私权声明</h3>
<p>MSTCBlogReader不会收集、存储、分享您的任何个人信息或者与您的设备相关的信息。我们不会收集任何统计数据和分析数据，也不会跟踪用户的行为。</p>
<p>本应用博客阅读功能使用rss抓取公开的博客订阅源，数据来自<a href="http://blog.sina.com.cn/mssclub">http://blog.sina.com.cn/mssclub</a>&nbsp;和&nbsp;<a href="http://blog.sina.com.cn/msra">http://blog.sina.com.cn/msra</a>&nbsp;</p>
<h3 class="special">应用名称</h3>
<p>MSTCBlogReader</p>
<h4>关于本应用</h4>
<p>本应用为第三方开发。</p>
</div>
</div>]]></description>
        </item>
        <item>
            <title>NetBeans添加中文javadoc</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/02/10/1950967.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Thu, 10 Feb 2011 13:47:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/02/10/1950967.html</guid>
            <description><![CDATA[<p>首先下载中文jdk6的api：</p>
<p><span class="javascript">JDK6 API 中文版 HTML 格式在线文档：<a target="_blank"><span color="#0000ff" style="color: #0000ff;">http://download.java.net/jdk/jdk-api-localizations/jdk-api-zh-cn/builds/latest/html/zh_CN/api/</span></a><br />JDK6
API 中文版zip 格式下载： <a class="ilink" target="_blank"><span color="#0000ff" style="color: #0000ff;">http://download.java.net/jdk/jdk-api-localizations/jdk-api-zh-cn/builds/latest/html_zh_CN.zip</span></a>
</span></p>
<p>官方下载地址可能比较慢，大家也可以试试其他下载源</p>

<p>然后打开在netbeans，工具-&gt;java平台-&gt;javadoc &nbsp; 点击&ldquo;增加zip/folder&rdquo;修改路径,javadoc的路径选取到api目录下,即x:/javadoc/html/zh_CN/api,后关闭退出就可以了.</p>
<p>ps:</p>
<p>1.有时候还是不能显示中文的,这样就将源里的src.zip文件移除,再添加上x:/javadoc/html/zh_CN/api路径就可以在NB中出现中文的浮动提示窗了.</p>
<p>2.建议设置成文件夹而不是zip压缩包，一个是为了不在NetBeans查看方便，另外目录的结构不容易出错。如果是zip压缩包，一定要注意目录结构，打开zip应该是javadoc的内容而不应该是一个文件夹，也就是说打开就应该能够看见index.html。</p>
<p>3.此处一定要注意，如果你设置完之后在代码里右键选择Show
Javadoc或者按ALT+F1没有反应，那么极大的可能是javadoc的目录结构不正确。</p>
]]></description>
        </item>
        <item>
            <title>【转】sql经典查询</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/02/06/1949456.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Sun, 06 Feb 2011 05:01:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/02/06/1949456.html</guid>
            <description><![CDATA[<p style="text-indent: 2em;">通过以下习题的练习，我们能快速熟悉掌握sql语句查询的语法和要领，大家要用心领会其中的要领和步骤，要学会分析步骤。</p>
<p style="text-indent: 2em;">一、单表查询练习</p>
<p style="text-indent: 2em;">1、查询&lt;学生信息表&gt;，查询学生"张三"的全部基本信息</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where sname='张三'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">2、查询&lt;学生信息表&gt;，查询学生"张三"和&rdquo;李四&rdquo;的基本信息</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where sname='张三'</p>
<p style="text-indent: 2em;">or sname='李四'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">3、查询&lt;学生信息表&gt;，查询姓"张"学生的基本信息</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where sname like '张%'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">4、查询&lt;学生信息表&gt;，查询姓名中含有"四"字的学生的基本信息</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where sname like '%四%'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">5、查询&lt;学生信息表&gt;，查询姓名长度为三个字，姓&ldquo;李&rdquo;，且最后一个字是&ldquo;强&rdquo;的全部学生信息。</p>
<p style="text-indent: 2em;">select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where sname like '李_强'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">6、查询&lt;学生信息表&gt;，查询姓"张"或者姓&rdquo;李&rdquo;的学生的基本信息。</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where sname like '张%'</p>
<p style="text-indent: 2em;">or sname like '李%'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">7、查询&lt;学生信息表&gt;，查询姓"张"并且"所属省份"是"北京"的学生信息</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where sname like '张%'</p>
<p style="text-indent: 2em;">and province='北京'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">8、查询&lt;学生信息表&gt;，查询"所属省份"是"北京"、&rdquo;新疆&rdquo;、&rdquo;山东&rdquo;或者"上海"的学生的信息</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where province in ('北京','上海','新疆','山东')</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">9、查询&lt;学生信息表&gt;，查询姓"张"，但是"所属省份"不是"北京"的学生信息</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where sname like '张%'</p>
<p style="text-indent: 2em;">and province !='北京'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">10、查询&lt;学生信息表&gt;，查询全部学生信息，并按照&ldquo;性别&rdquo;排序，性别相同的情况下按照&ldquo;所属省份&rdquo;排序，所属省份相同的情况下再按照&ldquo;班级&rdquo;排序</p>
<p style="text-indent: 2em;">select *</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">order by sex,province,class</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">11、查询&lt;学生信息表&gt;，查询现有学生都来自于哪些不同的省份</p>
<p style="text-indent: 2em;">select distinct province as省份</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">12、查询&lt;学生选修信息表&gt;，查询没有填写成绩的学生的学号、课程号和成绩</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where score is null</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">13、查询&lt;学生选修信息表&gt;，查询全部填写了成绩的学生的选修信息，并按照&ldquo;成绩&rdquo;从高到低进行排序</p>
<p style="text-indent: 2em;">Select *</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where score is not null</p>
<p style="text-indent: 2em;">order by score desc</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;</p>
<p style="text-indent: 2em;">二、聚合函数练习</p>
<p style="text-indent: 2em;">1、统计&lt;学生信息表&gt;，统计共有多少个学生</p>
<p style="text-indent: 2em;">Select count (*) as学生数量</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">2、统计&lt;学生信息表&gt;，统计年龄大于20岁的学生有多少个</p>
<p style="text-indent: 2em;">Select count(*)&nbsp;as学生数量</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where (2008-yearofbirth)&gt;20</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">3、统计&lt;学生信息表&gt;，统计入学时间在1980年至1982年的学生人数</p>
<p style="text-indent: 2em;">select count(*) as学生数量</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where enrollment between '1998-01-01' and '2003-12-30'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">对比以下查询方式，看看有何不同，为什么？</p>
<p style="text-indent: 2em;">select count(*) as学生数量</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">where enrollment between '1998' and '2003'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">4、统计&lt;学生选修信息表&gt;，统计学号为"S001"的学生的平均成绩</p>
<p style="text-indent: 2em;">Select&nbsp;avg(score)&nbsp;as平均成绩</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where sno='S001'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">5、统计&lt;学生选修信息表&gt;，统计学号为"S001"的学生的总成绩</p>
<p style="text-indent: 2em;">select&nbsp;sum(score)&nbsp;as总成绩</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where sno ='S001'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">6、统计&lt;学生选修信息表&gt;，查询课程号为&rdquo;C001&rdquo;的课程的最高成绩</p>
<p style="text-indent: 2em;">select max(score)&nbsp;as最高成绩</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where cno='C001'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">7、统计&lt;学生信息表&gt;，查询所有学生中的最大年龄是多少</p>
<p style="text-indent: 2em;">select&nbsp;2008-min(yearofbirth) as最大年龄</p>
<p style="text-indent: 2em;">from&nbsp;A_studentinfo</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">三、分组查询练习</p>
<p style="text-indent: 2em;">1、统计&lt;学生选修信息表&gt;，统计每个课程的选修人数</p>
<p style="text-indent: 2em;">select cno,count(*)&nbsp;as学生数量</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">group by cno</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">2、统计&lt;学生选修信息表&gt;，统计每个同学的总成绩</p>
<p style="text-indent: 2em;">select sno,sum(score) as总成绩</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">group by sno</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">3、统计&lt;学生信息表&gt;，统计每个班级中每种性别的学生人数，并按照班级排序</p>
<p style="text-indent: 2em;">select class as班级,sex as性别, count(*) as人数</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">group by class,sex</p>
<p style="text-indent: 2em;">order by class</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">4、统计&lt;学生选修信息表&gt;，统计每门课程的平均成绩,并按照成绩降序排序</p>
<p style="text-indent: 2em;">Select cno,avg(score) as平均成绩</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">group by cno</p>
<p style="text-indent: 2em;">order by avg(score) desc</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">5、统计&lt;学生选修信息表&gt;，显示有两门以上课程不及格的学生的学号</p>
<p style="text-indent: 2em;">Select&nbsp;sno as不及格学生学号</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where score&lt;60</p>
<p style="text-indent: 2em;">group by sno</p>
<p style="text-indent: 2em;">having count(*)&gt;1</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">6、统计&lt;学生信息表&gt;，统计每个班级中的最大年龄是多少</p>
<p style="text-indent: 2em;">select class as班级, 2008-min(yearofbirth) as最大年龄</p>
<p style="text-indent: 2em;">from A_studentinfo</p>
<p style="text-indent: 2em;">group by class</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">四、嵌套查询练习</p>
<p style="text-indent: 2em;">1、用子查询实现，查询选修&ldquo;高等数学&rdquo;课的全部学生的总成绩</p>
<p style="text-indent: 2em;">select sum(score) as高等数学总成绩</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where cno =</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;(</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;&nbsp;select cno</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;&nbsp;from A_courseinfo</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;&nbsp;where subject='高等数学'</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;)</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;</p>
<p style="text-indent: 2em;">2、用子查询实现，统计&lt;学生选修信息表&gt;，显示学号为"S001"的学生在其各科成绩中，最高分成绩所对应的课程号和成绩</p>
<p style="text-indent: 2em;">select score,cno</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where sno='S001'</p>
<p style="text-indent: 2em;">and score =</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;(</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;select max(score)</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;from A_studentcourse</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;where sno ='S001'</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;)</p>
<p style="text-indent: 2em;">思考：如果该学号学生有两个课程分数都为最高的100分，查询会有什么结果</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">3、用子查询实现，查询2班选修"数据库<a></a>技术"课的所有学生的成绩之和</p>
<p style="text-indent: 2em;">select&nbsp;sum(score) as数据库技术总成绩</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where cno =</p>
<p style="text-indent: 2em;">&nbsp;(</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;select cno</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;from A_courseinfo</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;where subject='数据库技术')</p>
<p style="text-indent: 2em;">and sno in</p>
<p style="text-indent: 2em;">&nbsp;(</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;select sno</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;from A_studentinfo</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;where class='2'</p>
<p style="text-indent: 2em;">&nbsp;)</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">4、用子查询实现，查询3班"张三"同学的"测试<a></a>管理"成绩</p>
<p style="text-indent: 2em;">select score</p>
<p style="text-indent: 2em;">from A_studentcourse</p>
<p style="text-indent: 2em;">where cno=</p>
<p style="text-indent: 2em;">&nbsp;(</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;select cno</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;from A_courseinfo</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;where subject='测试管理'</p>
<p style="text-indent: 2em;">&nbsp;)</p>
<p style="text-indent: 2em;">and sno in</p>
<p style="text-indent: 2em;">&nbsp;(</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;select sno</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;from A_studentinfo</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;where class='3'</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;&nbsp;and sname='张三'</p>
<p style="text-indent: 2em;">&nbsp;)</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;&nbsp;</p>
<p style="text-indent: 2em;">五、联接查询练习</p>
<p style="text-indent: 2em;">1、查询"张三"的各科考试成绩，要求显示姓名、课程号和成绩</p>
<p style="text-indent: 2em;">select sname as姓名,cno as课程号,score as成绩</p>
<p style="text-indent: 2em;">from A_studentinfo,A_studentcourse</p>
<p style="text-indent: 2em;">where A_studentinfo.sno=A_studentcourse.sno</p>
<p style="text-indent: 2em;">and sname='张三'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">2、查询"张三"的各科考试成绩中，哪科没有记录考试成绩，要求显示姓名、课程号和成绩</p>
<p style="text-indent: 2em;">select sname as姓名,cno as课程号,score as成绩</p>
<p style="text-indent: 2em;">from A_studentinfo,A_studentcourse</p>
<p style="text-indent: 2em;">where A_studentinfo.sno=A_studentcourse.sno</p>
<p style="text-indent: 2em;">and sname='张三'</p>
<p style="text-indent: 2em;">and score is null</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">3、查询"张三"的各门课程成绩，要求显示姓名、课程名称和成绩</p>
<p style="text-indent: 2em;">select sname as姓名,subject as课程名称,score as成绩</p>
<p style="text-indent: 2em;">from&nbsp;A_studentinfo,A_courseinfo,A_studentcourse</p>
<p style="text-indent: 2em;">where A_studentcourse.sno=A_studentinfo.sno</p>
<p style="text-indent: 2em;">and&nbsp;&nbsp;A_studentcourse.cno=A_courseinfo.cno</p>
<p style="text-indent: 2em;">and&nbsp;&nbsp;A_studentinfo.sname='张三'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">4、查询3班"张三"的"测试管理"成绩，要求显示姓名、成绩</p>
<p style="text-indent: 2em;">select sname as姓名,score as成绩</p>
<p style="text-indent: 2em;">from&nbsp;A_studentcourse,A_courseinfo,A_studentinfo</p>
<p style="text-indent: 2em;">where A_studentcourse.cno=A_courseinfo.cno</p>
<p style="text-indent: 2em;">and&nbsp;&nbsp;A_studentcourse.sno=A_studentinfo.sno</p>
<p style="text-indent: 2em;">and subject='测试管理'</p>
<p style="text-indent: 2em;">and class='3'</p>
<p style="text-indent: 2em;">and sname='张三'</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">&nbsp;</p>
<p style="text-indent: 2em;">5、查询所有2000年以前入学的，各班男生的各科考试平均成绩</p>
<p style="text-indent: 2em;">select class as班级,avg(score) as男生平均成绩</p>
<p style="text-indent: 2em;">from&nbsp;A_studentcourse,A_courseinfo,A_studentinfo</p>
<p style="text-indent: 2em;">where A_studentcourse.cno=A_courseinfo.cno</p>
<p style="text-indent: 2em;">and&nbsp;&nbsp;</p>]]></description>
        </item>
        <item>
            <title>【转】南京找实习攻略</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/02/03/1949081.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Thu, 03 Feb 2011 15:33:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/02/03/1949081.html</guid>
            <description><![CDATA[<p>刚刚毕业，出了学校，我也是职场新鲜人了，回顾自己找工作的整个历程，个人感觉 两段实习经历对我帮助蛮大。今天正好有空，为了回报本版和紫金飞鸿，也为了积攒 下人品，哈哈，写了这个南京找实习攻略，本文内容均为个人观点，仅供各位参考，期待 版上各位大牛们的批评指正。&nbsp;</p>
<p>本文主要针对研究生寻找实习，因为下文提到的众多实习基本要求实习半年及以上， 每周4-5个白天（不包含周六周日），对本科生来说，基本不可能有这么长时间的校外实习 时间，我自己本科时没有什么实习经验，期待版上的牛人给出有关本科找实习或者做项目 的经验。</p>
<p>因为本人是07级研究生，本文主要根据自己和周围同学的相关实习情况所写，具 体的实习职位、实习招聘、实习转正概率等各种情况每年都有变动，所以仅供参考。</p>
<p>另外 因为本人主要寻找的是通信与计算机方面的实习，本文主要针对通信与计算机方面的实习 而言，其中以通信为主，其他方面的实习就不涉及了。</p>
<p>&nbsp;</p>
<p>&nbsp;一、导师的允许 出去实习还是在学校做项目比较好，这个问题仁者见仁智者见智，具体看个人的情况 了。不过因为一般实习时间要求比较长，如果导师不允许，可能就不用继续往下看了，作 为在校学生，导师的话还是要好好听的，这是最高优先级的，导师要你做什么就去做什么 ，听老师的话，没错的。个人非常感谢我的导师允许我和我的同门出去实习，导师对我们 真的非常好。（发自内心的感谢，我的导师应该不会上BBS来看帖，而且我用的是新申请的 小号，呵呵）一般来说，我们学校的研究生实习时间一般是从研一暑假到研三，具体的时 间长度根据个人情况而定。至于因为实习，而可能产生的毕业论文盲审问题请慎重考虑。 实习除了老师的允许，可能还需要学院同意，具体不再讨论。</p>
<p>&nbsp;</p>
<p>&nbsp;二、南京提供实习岗位的一些相关企业（不是很完整，期待大家的补充）&nbsp;</p>
<p>1. 趋势 网络安全的企业。本版以及南京其他高校BBS经常可以看到他家招实习生，以招测试为 主。转正的难度比较大，他家米很多，如果是正式员工的话。&nbsp;</p>
<p>2. 南京摩托 主要做手机软件。在我们进入研三后，他家招实习生变的越来越多，曾经是我们前几届 研究生的实习首选，实习米比较多，实习手续要通过学校，钱也是经过财务处发，因为我 们这届周围去实习的人很少，我们研二的时候基本没招，转正概率未知。</p>
<p>&nbsp;3. 中兴通讯 我们研一暑假，中兴通讯搞过一次大规模的实习生校园招聘，招了我们这届和前一届的 很多人去实习，一共60人左右，去各种部门的都有，去做开发测试都有可能，转正概率非 常高。中兴的实习招聘目前就比较少了，建议寻找内部推荐的机会。</p>
<p>&nbsp;4. 华为 每年暑假，华为南京研究所会招一次实习生，招的人不是很多，主要针对将要进入研三 的研究生，转正概率非常高。</p>
<p>&nbsp;5. 三星 时不时会招点，具体要求都写的很清楚。他家在南京主要做手机软件和家电软件。</p>
<p>&nbsp;6. 爱立信 通信业的NO.1。南京爱立信主要是工厂和TD研发中心，他家经常招实习生，研发、测试 、系统等部门都会招，今年转正概率比较高。&nbsp;</p>
<p>7. 南京移动 需要参加江苏移动的暑期实习生校园招聘，竞争激烈，招人不多，针对全国，实习生招 了30不到，转正概率非常非常高。除了南京移动，全省的其他移动去年也都招了实习生。移动的实习生招聘流程和校园招聘一样。&nbsp;</p>
<p>8. 鸿信 江苏电信的直属公司，会时不时招点实习生，转正概率未知，2010校园招聘他家一共招 10人。&nbsp;</p>
<p>9. 几个邮规院 主要指江苏和华信（杭州），时不时会招实习生，可能会出差，转正概率很大。</p>
<p>&nbsp;10.其他未列举的企业，留待大家补充。</p>
<p>&nbsp;</p>
<p>&nbsp;三、南京以外的一些实习机会</p>
<p>&nbsp;1. 广东移动 每年都有实习生招聘，今年已经开始，部分1,2线城市和省移动会招聘。实习生招聘已 经是广东移动招聘的主要渠道，实习生转正概率相当大，不过招聘的竞争相当激烈，前年 面试要去武汉，去年部分公司来南京面试的，今年未知。招聘环节和校园招聘完全一样， 实习生转正人数足够的市公司校园招聘基本不招人了。除了广东移动和江苏移动，去年安 徽移动也招收实习生的。几家移动的实习都安排在暑假，为期1-2月，基本都是招收下一年 毕业的学生。&nbsp;</p>
<p>2. 中国电信 去年暑假前开始招聘实习生，有7个省级公司和3个研究院参加，一般来说省公司的直 属单位招人非常少，主要是地市公司。江苏电信只有鸿信参加了招聘。招聘限制在8个学校 的将要进入毕业班的学生，包含南邮，这次招聘只看简历，没有笔试面试，比较奇特，不 知道今年还招不招，实习时间1-2月。转正概率根据所实习公司而不同。&nbsp;</p>
<p>3. 前面说过，北京上海的实习机会比较多，到北京上海实习要考虑前面的笔试面试的来回 奔波和实习的住宿问题。相对来说，外企的实习收入会比较高，有的国企给钱较少，最终 能不能转正就看能力和各种因素了，每个企业的情况都不相同，具体情况具体分析吧。如 果想去北京实习的话，byr上面的兼职版发布的实习机会很多；想去上海实习的话，饮水思 源兼职版信息也很多。</p>
<p>&nbsp;</p>
<p>&nbsp;四、实习信息获取渠道&nbsp;</p>
<p>1. 各大学校BBS的兼职版，南京的话，建议多看看小百合、紫金飞鸿、虎踞龙盘等论坛的 兼职或者实习版。准备去北京上海等城市实习则需要关注当地主要高校的BBS的相关版。部 分南京高校没有BBS，有兴趣的话可以关注他们西祠讨论版有关工作与实习板块的相关信息 。&nbsp;</p>
<p>2. 应届生网站。他上面的实习信息主要转载各所高校BBS或者就业网站上的信息，相对更 新肯定比BBS上面的慢一点，上面转载的信息投的人很多，命中概率不是很高，目前好像没 有转载我们学校BBS的实习招聘信息。&nbsp;</p>
<p>3. 三大主要招聘网站，中华英才网、51job、智联招聘。上面时不时会有相关招聘信息。</p>
<p>&nbsp;4. 师兄师姐的内部推荐，命中概率相对很高。&nbsp;</p>
<p>5. 导师的介绍，命中概率非常高。&nbsp;</p>
<p>&nbsp;</p>
<p>五、结束语 本文信息仅供参考，祝各位师弟师妹能够找到满意的实习，如果本文能带给您一点点帮 助，我就心满意足了，呵呵。本文没有具体阐述实习的笔试面试等环节信息，这些信息本 版已经有很多了，个人也没有参加上面所列举所有企业的实习招聘，所以无法提供相关信 息，请查阅其他文章。本文可能引用了其他文章的一些内容，限于时间关系，无法一一标 注，请谅解。感谢您的阅读，如果后续还有空闲时间，我可能会再写点找工作等方面的个 人经验之谈。 我的贴好久没上过十大了，如果可以的话，让我毕业后再上次十大吧，哈哈。 --</p>]]></description>
        </item>
        <item>
            <title>盒子里的梦想</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/01/31/1948249.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Mon, 31 Jan 2011 05:38:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/01/31/1948249.html</guid>
            <description><![CDATA[<p>2010年百度年会的一个视频《盒子里的梦想》，最近很多人都在分享：</p>
<p><a href="http://v.youku.com/v_show/id_XMjM4OTA1NzI4.html">http://v.youku.com/v_show/id_XMjM4OTA1NzI4.html</a></p>
<p>很喜欢里面最后的一句话：</p>
<p>我们的人生其实还很长，还有很多时间去实现自己的梦想，重要的是，其实我吗我们还没有忘记自己的梦想。</p>
<p>&nbsp;</p>
<p>里面把很多梦想都写下来，然后去实现的想法非常好，我也想试一试：</p>
<p>&nbsp;</p>
<table>
<tbody>
<tr>
<td>梦想</td>
<td>子梦想</td>
<td>书写时间</td>
<td>实现时间</td>
</tr>
<tr>
<td>1完成实时排名的</td>
<td>每日数据存入数据库</td>
<td>2011-01-31</td>
<td></td>
</tr>
<tr>
</tr>
<tr>
<td>2学习基础的xml知识</td>
<td></td>
<td>2011-01-31</td>
<td></td>
</tr>
<tr>
</tr>
<tr>
<td>3.poj</td>
<td>300</td>
<td>2011-01-31</td>
<td></td>
</tr>
<tr>
</tr>
<tr>
<td>4</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
</tr>
</tbody>
</table>
<p>&nbsp;</p>]]></description>
        </item>
        <item>
            <title>【转】SQL 高性能查询优化语句</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/01/31/1948138.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Sun, 30 Jan 2011 16:33:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/01/31/1948138.html</guid>
            <description><![CDATA[<p><span class="Apple" style="widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium Simsun; white-space: normal; orphans: 2; letter-spacing: normal; color: #000000; word-spacing: 0px;"><span class="Apple" style="text-align: left; line-height: 29px; font-family: Helvetica, Arial, sans-serif; color: #444444; font-size: 14px;">
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">保证在实现功能的基础上，尽量减少对<span style="margin: 0px; word-wrap: break-word; word-break: break-all; text-decoration: underline; padding: 0px;"><strong style="font-style: normal; margin: 0px; word-wrap: break-word; word-break: break-all; font-weight: bold; padding: 0px;">数据库</strong></span>的访问次数；通过搜索参数，尽量减少对表的访问行数,最小化结果集，从而减轻网络负担；能够分开的操作尽量分开处理，提高每次的响应速度；在数据窗口使用SQL时，尽量把使用的索引放在选择的首列；算法的结构尽量简单；在查询时，不要过多地使用通配符如 SELECT * FROM T1语句，要用到几列就选择几列如：SELECT COL1,COL2 FROM T1；在可能的情况下尽量限制尽量结果集行数如：SELECT TOP 300 COL1,COL2,COL3 FROM T1,因为某些情况下用户是不需要那么多的数据的。<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />在没有建索引的情况下，数据库查找某一条数据，就必须进行全表扫描了，对所有数据进行一次遍历，查找出符合条件的记录。在数据量比较小的情况下，也许看不出明显的差别，但是当数据量大的情况下，这种情况就是极为糟糕的了。<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SQL语句在SQL<span class="Apple">&nbsp;</span><span style="margin: 0px; word-wrap: break-word; word-break: break-all; text-decoration: underline; padding: 0px;"><strong style="font-style: normal; margin: 0px; word-wrap: break-word; word-break: break-all; font-weight: bold; padding: 0px;">SERVER</strong></span>中是如何执行的，他们担心自己所写的SQL语句会被SQL SERVER误解。比如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select * from table1 where name=&rsquo;zhangsan&rsquo; and tID &gt; 10000<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />和执行:<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select * from table1 where tID &gt; 10000 and name=&rsquo;zhangsan&rsquo;<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />一些人不<span style="margin: 0px; word-wrap: break-word; word-break: break-all; text-decoration: underline; padding: 0px;"><strong style="font-style: normal; margin: 0px; word-wrap: break-word; word-break: break-all; font-weight: bold; padding: 0px;">知道</strong></span>以上两条语句的执行效率是否一样，因为如果简单的从语句先后上看，这两个语句的确是不一样，如果tID是一个聚合索引，那么后一句仅仅从表的 10000条以后的记录中查找就行了；而前一句则要先从全表中查找看有几个name=&rsquo;zhangsan&rsquo;的，而后再根据限制条件条件tID&gt; 10000来提出查询结果。<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />事实上，这样的担心是不必要的。SQL SERVER中有一个&ldquo;查询分析优化器&rdquo;，它可以计算出where子句中的搜索条件并确定哪个索引能缩小表扫描的搜索空间，也就是说，它能实现自动优化。虽然查询优化器可以根据where子句自动的进行查询优化，但有时查询优化器就会不按照您的本意进行快速查询。<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />在查询分析阶段，查询优化器查看查询的每个阶段并决定限制需要扫描的数据量是否有用。如果一个阶段可以被用作一个扫描参数（SARG），那么就称之为可优化的，并且可以利用索引快速获得所需数据。<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SARG的定义：用于限制搜索的一个操作，因为它通常是指一个特定的匹配，一个值的范围内的匹配或者两个以上条件的AND连接。形式如下：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />列名 操作符 &lt;常数 或 变量&gt; 或 &lt;常数 或 变量&gt; 操作符 列名<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />列名可以出现在操作符的一边，而常数或变量出现在操作符的另一边。如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />Name=&rsquo;张三&rsquo;<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />价格&gt;5000<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />5000&lt;价格<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />Name=&rsquo;张三&rsquo; and 价格&gt;5000<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />如果一个表达式不能满足SARG的形式，那它就无法限制搜索的范围了，也就是SQL SERVER必须对每一行都判断它是否满足WHERE子句中的所有条件。所以一个索引对于不满足SARG形式的表达式来说是无用的。<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />所以，优化查询最重要的就是，尽量使语句符合查询优化器的规则避免全表扫描而使用索引查询。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">具体要注意的：</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">1.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where num is null<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where num=0</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">2.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。优化器将无法通过索引来确定将要命中的行数,因此需要搜索该表的所有行。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">3.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where num=10 or num=20<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />可以这样查询：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where num=10<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />union all<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where num=20</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">4.in 和 not in 也要慎用，因为IN会使系统无法使用索引,而只能直接搜索表中的数据。如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where num in(1,2,3)<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />对于连续的数值，能用 between 就不要用 in 了：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where num between 1 and 3</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">5.尽量避免在索引过的字符数据中，使用非打头字母搜索。这也使得引擎无法利用索引。<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />见如下例子：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT * FROM T1 WHERE NAME LIKE &lsquo;%L%&rsquo;<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT * FROM T1 WHERE SUBSTING(NAME,2,1)=&rsquo;L&rsquo;<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT * FROM T1 WHERE NAME LIKE &lsquo;L%&rsquo;<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />即使NAME字段建有索引，前两个查询依然无法利用索引完成加快操作，引擎不得不对全表所有数据逐条操作来完成任务。而第三个查询能够使用索引来加快操作。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">6.必要时强制查询优化器使用某个索引，如在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where num=@num<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />可以改为强制查询使用索引：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t with(index(索引名)) where num=@num</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">7.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT * FROM T1 WHERE F1/2=100<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />应改为:<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT * FROM T1 WHERE F1=100*2</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">SELECT * FROM RECORD WHERE SUBSTRING(CARD_NO,1,4)=&rsquo;5378&rsquo;<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />应改为:<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT * FROM RECORD WHERE CARD_NO LIKE &lsquo;5378%&rsquo;</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">SELECT member_number, first_name, last_name FROM members<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />WHERE DATEDIFF(yy,datofbirth,GETDATE()) &gt; 21<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />应改为:<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT member_number, first_name, last_name FROM members<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />WHERE dateofbirth &lt; DATEADD(yy,-21,GETDATE())<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />即：任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">8.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where substring(name,1,3)='abc'--name以abc开头的id<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where datediff(day,createdate,'2005-11-30')=0--&lsquo;2005-11-30&rsquo;生成的id<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />应改为:<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where name like 'abc%'<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select id from t where createdate&gt;=&rsquo;2005-11-30&prime; and createdate&lt;'2005-12-1'</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">9.不要在 where 子句中的&ldquo;=&rdquo;左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">10.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">11.很多时候用 exists是一个好的选择：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />elect num from a where num in(select num from b)<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />用下面的语句替换：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />select num from a where exists(select 1 from b where num=a.num)</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">SELECT SUM(T1.C1)FROM T1 WHERE(<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />(SELECT COUNT(*)FROM T2 WHERE T2.C2=T1.C2&gt;0)<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT SUM(T1.C1) FROM T1WHERE EXISTS(<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT * FROM T2 WHERE T2.C2=T1.C2)<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />两者产生相同的结果，但是后者的效率显然要高于前者。因为后者不会产生大量锁定的表扫描或是索引扫描。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">如果你想校验表里是否存在某条纪录，不要用count(*)那样效率很低，而且浪费服务器资源。可以用EXISTS代替。如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />IF (SELECT COUNT(*) FROM table_name WHERE column_name = &lsquo;xxx&rsquo;)<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />可以写成：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />IF EXISTS (SELECT * FROM table_name WHERE column_name = &lsquo;xxx&rsquo;)</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">经常需要写一个T_SQL语句比较一个父结果集和子结果集，从而找到是否存在在父结果集中有而在子结果集中没有的记录，如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT a.hdr_key FROM hdr_tbl a&mdash;- tbl a 表示tbl用别名a代替<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />WHERE NOT EXISTS (SELECT * FROM dtl_tbl b WHERE a.hdr_key = b.hdr_key)<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT a.hdr_key FROM hdr_tbl a<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />LEFT JOIN dtl_tbl b ON a.hdr_key = b.hdr_key WHERE b.hdr_key IS NULL<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT hdr_key FROM hdr_tbl<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />WHERE hdr_key NOT IN (SELECT hdr_key FROM dtl_tbl)<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />三种写法都可以得到同样正确的结果，但是效率依次降低。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">12.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">13.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">14.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">15.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">16.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">17.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">18.尽量避免大事务操作，提高系统并发能力。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">19.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">20. 避免使用不兼容的数据类型。例如float和int、char和varchar、binary和varbinary是不兼容的。数据类型的不兼容可能使优化器无法执行一些本来可以进行的优化操作。例如:<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT name FROM employee WHERE salary &gt; 60000<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />在这条语句中,如salary字段是money型的,则优化器很难对其进行优化,因为60000是个整型数。我们应当在编程时将整型转化成为钱币型,而不要等到运行时转化。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">21.充分利用连接条件，在某种情况下，两个表之间可能不只一个的连接条件，这时在 WHERE 子句中将连接条件完整的写上，有可能大大提高查询速度。<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />例：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT SUM(A.AMOUNT) FROM ACCOUNT A,CARD B WHERE A.CARD_NO = B.CARD_NO<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT SUM(A.AMOUNT) FROM ACCOUNT A,CARD B WHERE A.CARD_NO = B.CARD_NO AND A.ACCOUNT_NO=B.ACCOUNT_NO<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />第二句将比第一句执行快得多。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">22、使用视图加速查询<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />把表的一个子集进行排序并创建视图，有时能加速查询。它有助于避免多重排序 操作，而且在其他方面还能简化优化器的工作。例如：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT cust.name，rcvbles.balance，&hellip;&hellip;other columns<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />FROM cust，rcvbles<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />WHERE cust.customer_id = rcvlbes.customer_id<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />AND rcvblls.balance&gt;0<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />AND cust.postcode&gt;&ldquo;98000&rdquo;<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />ORDER BY cust.name</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">如果这个查询要被执行多次而不止一次，可以把所有未付款的客户找出来放在一个视图中，并按客户的名字进行排序：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />CREATE VIEW DBO.V_CUST_RCVLBES<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />AS<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT cust.name，rcvbles.balance，&hellip;&hellip;other columns<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />FROM cust，rcvbles<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />WHERE cust.customer_id = rcvlbes.customer_id<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />AND rcvblls.balance&gt;0<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />ORDER BY cust.name<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />然后以下面的方式在视图中查询：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT ＊ FROM V_CUST_RCVLBES<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />WHERE postcode&gt;&ldquo;98000&rdquo;<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />视图中的行要比主表中的行少，而且物理顺序就是所要求的顺序，减少了磁盘I/O，所以查询工作量可以得到大幅减少。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">23、能用DISTINCT的就不用GROUP BY<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT OrderID FROM Details WHERE UnitPrice &gt; 10 GROUP BY OrderID<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />可改为：<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT DISTINCT OrderID FROM Details WHERE UnitPrice &gt; 10</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">24.能用UNION ALL就不要用UNION<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />UNION ALL不执行SELECT DISTINCT函数，这样就会减少很多不必要的资源</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">35.尽量不要用SELECT INTO语句。<br style="margin: 0px; word-wrap: break-word; word-break: break-all; padding: 0px;" />SELECT INOT 语句会导致表锁定，阻止其他用户访问该表。</p>
<p style="padding-bottom: 10px; text-indent: 2em; margin: 0px 0px 6px; padding-left: 0px; padding-right: 0px; word-wrap: break-word; word-break: break-all; padding-top: 0px;">上面我们提到的是一些基本的提高查询速度的注意事项,但是在更多的情况下,往往需要反复试验比较不同的语句以得到最佳方案。最好的方法当然是测试，看实现相同功能的SQL语句哪个执行时间最少，但是数据库中如果数据量很少，是比较不出来的，这时可以用查看执行计划，即：把实现相同功能的多条SQL语句考到查询分析器，按CTRL+L看查所利用的索引，表扫描次数（这两个对性能影响最大），总体上看询成本百分比即可。</p>
</span></span></p>]]></description>
        </item>
        <item>
            <title>初次进行php开发感受</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/01/29/1947333.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Fri, 28 Jan 2011 19:41:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/01/29/1947333.html</guid>
            <description><![CDATA[<p>这两天，我没有刷poj,而是做了一个学校poj_rank自动获取的系统。
先是自学了php，然后就一边摸索一边开发，由于是独立完成(抓取html的插件是学长找到的，并且给我样例代码学习)，所以遇到问题基本上都是自己想办法解决，当然，设计数据库的时候还是预先和同学讨论的，虽然最后的设计方案和自己设计的差不多。&nbsp;
</p>
<p>&nbsp;</p>
<p>花了5天时间，初步实现了预想的功能，自己的php技术也有了进步，也成功使用了mysql数据库保存数据，下面说说我的收获与感想：</p>
<p>&nbsp;</p>
<p>&nbsp;1。一本适合自己的书非常重要，对于我来说，看书学习还是主流，电子书学习效率太低。我更适合案例驱动式的教材，也就是一些供自学的教材，通过案例来帮助理解，虽然这样学到的东西不够全面，但是对于开发来说，非常有效，并且速度快，这次使用的书：博文的《21天学通php》，虽然一看书名就知道只是本浅显的教材，但的确是一本特别适合初学者的书，简单介绍了php和mysql的用法，最后的案例也很简单，一个是基于读文件的计数器，一个是基于数据库的留言板系统。由于有一些基础（cpp,sql），所以这本21天的书我不到5天就看完了，开始的所有案例都上机，后来也没有专门上机，而是遇到问题再去翻书。不过这样也挺好，我现在php基本上算是入门了，下一步就可以看专业一点的书，如果一上来就看专业的书，估计现在我还什么都不懂呢。&nbsp;</p>
<p>&nbsp;</p>
<p>2。这次个人开发，也让我发现一个人的很多弊端，最大的是知识点盲区，或者一些怎么都调不出来的bug，如果有一个信得过的队友，我相信开发时间会大大缩短。&nbsp;</p>
<p>&nbsp;</p>
<p>3。这次之后，我有意学习一下版本控制技术。本次开始，出气没有任何版本控制意识，后来出来一个问题我才开始每个版本复制一份文件，这样还是太土，得研究一些犀利的技术武装自己</p>
<p>&nbsp;</p>
<p>&nbsp;4。兴趣是最好的老师，这次开发之后，我才发现学习自己有兴趣的东西的效率是多么得高，如果学校开设这样的课程，我可能一个学期都做不出这样的东西，呵呵，还是好好利用寒假多学一些东西吧！</p>]]></description>
        </item>
        <item>
            <title>php学习笔记</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/01/25/1944219.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Tue, 25 Jan 2011 00:55:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/01/25/1944219.html</guid>
            <description><![CDATA[<p>&lt;html&gt;<br />&nbsp;&nbsp;&nbsp; &lt;head&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;title&gt;php学习笔记&lt;/title&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;style&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--修改css--&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; body {background-color:black; color:white;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; h1{font: 72pt arial bold;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/style&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/head&gt;<br />&nbsp;&nbsp;&nbsp; &lt;body&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;?php<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //注释<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #注释<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * 注释<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a = 5;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $b = 010; //八进制<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $c = 0xf;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo '$b=' . "$b&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print '$c=' . "$c&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo '$a&lt;br&gt;'; //单引号对引号里不识别<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print '$a&lt;br&gt;';</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //转义字符\n换行并归零 \br换行 \t \' \" \$ \r回车(这里的换行符是显示在源代码里面的换行符，在网页里并不会显示)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //null 1)被赋值null 2)尚未被赋值&nbsp; 3)被unset</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $var = 1.1;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "$var is a " . gettype($var) . "&lt;br&gt;"; //.用于连接字符串,输出1.1 is a double<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var_dump($var); //输出变量类型，这里是:float<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //转换变量类型-&gt;自动由小到大<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //强制转换 cast或settype();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "&lt;br&gt;&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //$_SERVER组的内变量<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "目前执行的文件名称" . $_SERVER['PHP_SELF'] . "&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "服务器名" . $_SERVER['SERVER_NAME'] . "&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "服务器软件" . $_SERVER['SERVER_SOFTWARE'] . "&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "文档的根目录" . $_SERVER['DOCUMENT_ROOT'] . "&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "用户相关信息" . $_SERVER['HTTP_USER_AGENT'] . "&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "远程用户的地址" . $_SERVER['REMOTE_ADDR'] . "&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "远程用户的连接端口" . $_SERVER['REMOTE_PORT'] . "&lt;br&gt;";</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include "GetIP.php";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetIP();</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //常量<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "你的系统是：" . PHP_OS . "&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "目前使用的PHP版本是：" . PHP_VERSION . "&lt;P&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //自定义常量<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define("PI", 3.14159);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo PI . "&lt;br&gt;";</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //运算符同c，注意.是连接字符串运算符<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //位运算符同；逻辑运算符：^按位异或 xor异或 and/&amp;&amp;与 or/||或 ！非<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* 其他运算符<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * &amp;取地址<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * @不显示错误信息<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * ?=三目<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * ,逗号运算符<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * -&gt;应用对象的方法和属性<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * =&gt;数组赋值<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //流程控制，if() eles;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //while(){}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // switch{ case 1: ; break; default;} 同样<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //注意for(,,){}用,分隔<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //输出99乘法表<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print("&lt;table border=1&gt;"); //表格开始<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for ($row = 1; $row &lt;= 9; $row++) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print("&lt;tr&gt;\n");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for ($column = 1; $column &lt;= $row; $column++) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print("&lt;td&gt;");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print($row * $column);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print("&lt;/td&gt;");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print("&lt;/tr&gt;");<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print("&lt;/table&gt;");</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //global $int;全局变量<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //static $num=0; $num++;静态变量，第一次定义有效<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //函数变量<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function testvar() {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "testvar()函数&lt;br&gt;";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function setname($string) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "my name is $string";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $rtext = 'testvar';<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $rtext();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $rtext = 'setname';<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $rtext("Jun");</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ?&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/body&gt;<br />&lt;/html&gt;</p>]]></description>
        </item>
        <item>
            <title>html学习</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/01/24/1943283.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Mon, 24 Jan 2011 08:49:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/01/24/1943283.html</guid>
            <description><![CDATA[<style><!--
修改css-->
            body {background-color:black; color:white;}
            h1{font: 72pt arial bold;}

--&gt;
--&gt;
--&gt;
--&gt;</style>
<!--?php
        echo 插入php代码;
        ?-->
        <!--
        <br>换行
        <b>粗体
        <i>斜体
        <em>斜体
        <u>下划线
        <s>删除线
        <sup>上标
        <sub>下标
        <big>大号字
        <small>小号字
        <var>声明变量
        <samp>等宽
        -->
<p>段落标记</p>
<p>
        <br />换行<br />
        <a href="www.baidu.com">
            这是一个超链接
        </a></p>
<!--text:文字颜色 bgcolor：背景颜色  background:背景图像 link:默认连接颜色 alink:单击时链接颜色 vlink:访问后链接颜色-->
        <center>居中</center>
<h1>各种等级的标题，不过这个标题的字号已经改为72</h1>
<h2 align="center">标题居中对齐</h2>
<p>
        <span face="隶书" size="3" color="yellow" style="color: yellow; font-family: 隶书; font-size: small;">隶书 3号字 黄色</span>
        <br />
        &nbsp;&nbsp;&nbsp;&nbsp;插入了四个空格<br />
        哈哈哈,这里没有插入四个空格<br />
    <nobr>这是不换行标签，不管浏览器的自动适应 这是不换行标签，不管浏览器的自动适应 这是不换行标签，不管浏览器的自动适应 这是不换行标签，不管浏览器的自动适应 这是不换行标签，不管浏览器的自动适应</nobr>
    这个会自动换行的   这个会自动换行的   这个会自动换行的   这个会自动换行的   这个会自动换行的   这个会自动换行的   这个会自动换行的   这个会自动换行的   这个会自动换行的   这个会自动换行的   这个会自动换行的   这个会自动换行的</p>]]></description>
        </item>
        <item>
            <title>training diary 2011-01-22</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/01/24/1943046.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Mon, 24 Jan 2011 05:26:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/01/24/1943046.html</guid>
            <description><![CDATA[<p>
<p>This is the second day of this winter holiday.</p>
<p>I know I must do a lot in this winter holiday ,so I go back to school ,in the training room, I would have a better efficency!</p>
<p>&nbsp;</p>
<p>details:</p>
<p>1)</p>
<p>00:00 regist the codeforce #52 , but it is a long time since last coding, so I am in very bad condition.Firstly,i didn't read the problem correctly, wa 3 times, I got the ac 30 minutes after the match started.I passed the pretest of problem B at 50mins, but it failed the final test after the contest.It was because when debuging,I found a small mistake and corrected it,but this sentence appeared two times,I didn't correct the other one,so....</p>
<p>Then ,I spent the last 1 hour in problem E,but there is something wrong with my IDE(both netbeans and Eev),I can't debug the long codes,then the contest ended...</p>
<p>1.尽快恢复状态 2.提升代码习惯 3.重整系统</p>
<p>&nbsp;</p>
<p>2)I went back to school in the afternoon,then I found some problems on poj ,1579 is a simple problem,you could finish by both recursion and dp,but 注意题目的优先计算顺序。先是考虑是否会小于0，然后才考虑是否会大于20，要不然就会WA。（害得我wa了一下午,555）</p>
</p>]]></description>
        </item>
        <item>
            <title>我来到博客园了！</title>
            <link>http://www.cnblogs.com/un_estate/archive/2011/01/22/1942049.html</link>
            <dc:creator>un&amp;#39;estate</dc:creator>
            <author>un&amp;#39;estate</author>
            <pubDate>Sat, 22 Jan 2011 08:28:00 GMT</pubDate>
            <guid>http://www.cnblogs.com/un_estate/archive/2011/01/22/1942049.html</guid>
            <description><![CDATA[<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>首先批评一下博客园没有自动保存草稿的功能，刚才插入代码导致页面崩溃，写好多文章没有了，不过以后技术文章一定不会直接用网页写的。</p>
<p>&nbsp;</p>
<p>来到博客园的原因很简单：</p>
<p>1.原来的空间在百度，可惜百度对于写代码的支持太差，不仅没有插入代码功能，连tab都不支持；</p>
<p>2.百度空间现在在向sns方向发展，最近搞出了搭讪等等应用，主页变得太难看，实在受不了啊！</p>
<p>&nbsp;</p>
<p>以后认真学习编程，多写文章！</p>
<div class="cnblogs_Highlighter">
<pre class="brush:cpp">void main(){
    puts("I love programming!");
}</pre>
</div>]]></description>
        </item>
    </channel>
</rss>